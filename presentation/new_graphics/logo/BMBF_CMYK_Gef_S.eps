%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Robert S SIXPack) (SIXPack)%%Title: (BMBF_CMYK_Gef_S.eps)%%CreationDate: (11/19/04) (1:44 PM)%%BoundingBox: 234 386 362 477%%HiResBoundingBox: 234.0879 386.5498 361.0215 476.5474%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: 28 30 566 811%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -646 980 1 1905 1149 26 1 1 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:28 30%%AI3_PaperRect:-28 811 567 -31%%AI3_Margin:28 -30 -29 31%AI7_GridSettings: 28.3465 8 28.3465 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc0 0 0 0 k(Neues Farbfeld 4) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln1 Au1 Ap0 O0 0 0 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR361.0215 386.5498 m234.0879 386.5498 L234.0879 476.5474 L361.0215 476.5474 L361.0215 386.5498 Lfu0 Ap1 O0 0 0 1 k300 Ar278.832 423.9756 m278.832 423.27 278.3691 422.9937 278 422.9937 c277.5127 422.9937 277.2773 423.3374 277.2773 423.8496 c277.2773 426.7905 l276.5889 426.7905 l276.5889 423.5562 l276.5889 422.8335 276.9917 422.4639 277.7314 422.4639 c278.1758 422.4639 278.5796 422.6743 278.8066 423.0601 c278.832 423.0601 l278.832 422.5483 l279.5625 422.5483 l279.5371 422.8423 279.5205 423.1362 279.5205 423.4302 c279.5205 426.7905 l278.832 426.7905 l278.832 423.9756 l278.832 423.9756 lf283.7544 422.5483 m283.7544 425.4878 l283.7544 426.3281 283.5273 426.8735 282.6201 426.8735 c282.0742 426.8735 281.7549 426.7231 281.4863 426.2437 c281.4531 426.2437 l281.4531 426.7905 l280.7217 426.7905 l280.7471 426.4956 280.7632 426.2026 280.7632 425.9077 c280.7632 422.5483 l281.4531 422.5483 l281.4531 425.0601 l281.4531 425.6396 281.562 426.311 282.3179 426.311 c282.9058 426.311 283.0654 425.9414 283.0654 425.4878 c283.0654 422.5483 l283.7544 422.5483 l283.7544 422.5483 lf*u287.1396 424.8413 m287.1396 423.9849 287.1396 423.0264 286.3667 423.0264 c285.502 423.0264 285.502 423.9517 285.502 424.5894 c285.502 425.7231 285.603 426.311 286.3423 426.311 c287.1055 426.311 287.1396 425.4038 287.1396 424.8413 c287.1396 424.8413 lf1 D287.1396 426.3628 m287.1147 426.3628 l286.8789 426.6973 286.5854 426.8735 286.1826 426.8735 c284.813 426.8735 284.7793 425.6567 284.7793 424.5972 c284.7793 422.7329 285.4678 422.4639 286.1489 422.4639 c286.5938 422.4639 286.8877 422.6572 287.1226 423.0527 c287.1396 423.0527 l287.1396 422.5483 l287.8281 422.5483 l287.8281 428.6128 l287.1396 428.6128 l287.1396 426.3628 l287.1396 426.3628 lf*U0 D291.499 422.5483 m291.499 425.3203 l293.6157 425.3203 l293.6157 425.9927 l291.499 425.9927 l291.499 427.9419 l293.7324 427.9419 l293.7324 428.6128 l290.7256 428.6128 l290.7256 422.5483 l291.499 422.5483 l291.499 422.5483 lf*u295.8481 423.0264 m295.1338 423.0264 294.957 423.522 294.957 424.9009 c294.957 426.0601 295.3179 426.311 295.8481 426.311 c296.377 426.311 296.7383 426.0601 296.7383 424.9009 c296.7383 423.522 296.562 423.0264 295.8481 423.0264 c295.8481 423.0264 lf1 D295.8481 422.4639 m296.7471 422.4639 297.4604 422.7329 297.4604 424.606 c297.4604 425.8501 297.3179 426.8735 295.8481 426.8735 c294.3779 426.8735 294.2354 425.8501 294.2354 424.606 c294.2354 422.7329 294.9487 422.4639 295.8481 422.4639 c295.8481 422.4639 lf*U0 D299.2246 426.7905 m298.5371 426.7905 l298.5371 422.5483 l299.2246 422.5483 l299.2246 425.0508 l299.2246 425.6226 299.418 426.2026 300.1816 426.2026 c300.3076 426.2026 300.4258 426.1763 300.5527 426.1597 c300.5527 426.8735 l299.8799 426.8735 299.5283 426.7993 299.2422 426.1519 c299.2246 426.1519 l299.2246 426.7905 l299.2246 426.7905 lf303.9922 423.7583 m303.9922 425.0508 301.873 425.0347 301.873 425.7827 c301.873 426.1519 302.1602 426.353 302.5293 426.353 c302.9668 426.353 303.2021 426.1177 303.1934 425.6733 c303.958 425.6733 l304.0166 426.5127 303.3711 426.8735 302.6152 426.8735 c301.4209 426.8735 301.1514 426.1597 301.1514 425.7153 c301.1514 424.4468 303.2695 424.4297 303.2695 423.6738 c303.2695 423.2368 302.9502 423.0264 302.5371 423.0264 c301.8418 423.0264 301.832 423.5981 301.832 423.8413 c301.0518 423.8413 l301.0254 422.8677 301.5977 422.4639 302.5137 422.4639 c303.3535 422.4639 303.9922 422.8247 303.9922 423.7583 c303.9922 423.7583 lf307.7949 425.4302 m307.8369 426.3794 307.3398 426.8735 306.4922 426.8735 c305.0234 426.8735 304.8789 425.8501 304.8789 424.606 c304.8789 422.7329 305.5938 422.4639 306.4922 422.4639 c306.9639 422.4639 307.8545 422.7661 307.8281 423.9595 c307.1055 423.9595 l307.1309 423.1948 306.6523 423.0264 306.4922 423.0264 c305.7793 423.0264 305.6035 423.522 305.6035 424.9009 c305.6035 426.0601 305.9629 426.311 306.4922 426.311 c306.7529 426.311 307.0977 426.126 307.0811 425.4302 c307.7949 425.4302 l307.7949 425.4302 lf311.9268 422.5483 m311.9268 425.5552 l311.9268 426.5127 311.5234 426.8735 310.8018 426.8735 c310.248 426.8735 309.9287 426.7397 309.6523 426.2437 c309.6182 426.2437 l309.6182 428.6128 l308.9297 428.6128 l308.9297 422.5483 l309.6182 422.5483 l309.6182 425.0435 l309.6182 425.7568 309.7939 426.311 310.4824 426.311 c311.0713 426.311 311.2383 425.9414 311.2383 425.4204 c311.2383 422.5483 l311.9268 422.5483 l311.9268 422.5483 lf315.4063 423.9756 m315.4063 423.27 314.9443 422.9937 314.5742 422.9937 c314.0859 422.9937 313.8516 423.3374 313.8516 423.8496 c313.8516 426.7905 l313.1631 426.7905 l313.1631 423.5562 l313.1631 422.8335 313.5664 422.4639 314.3057 422.4639 c314.751 422.4639 315.1543 422.6743 315.3809 423.0601 c315.4063 423.0601 l315.4063 422.5483 l316.1367 422.5483 l316.1104 422.8423 316.0938 423.1362 316.0938 423.4302 c316.0938 426.7905 l315.4063 426.7905 l315.4063 423.9756 l315.4063 423.9756 lf320.3281 422.5483 m320.3281 425.4878 l320.3281 426.3281 320.1006 426.8735 319.1934 426.8735 c318.6484 426.8735 318.3301 426.7231 318.0605 426.2437 c318.0264 426.2437 l318.0264 426.7905 l317.2969 426.7905 l317.3203 426.4956 317.3379 426.2026 317.3379 425.9077 c317.3379 422.5483 l318.0264 422.5483 l318.0264 425.0601 l318.0264 425.6396 318.1367 426.311 318.8926 426.311 c319.4795 426.311 319.6387 425.9414 319.6387 425.4878 c319.6387 422.5483 l320.3281 422.5483 l320.3281 422.5483 lf*u323.7305 424.6904 m323.7305 424.1016 323.7559 423.1196 322.9248 423.1196 c322.4121 423.1196 322.0996 423.438 322.0996 424.7988 c322.0996 425.3618 322.127 426.3022 322.9072 426.3022 c323.7715 426.3022 323.7305 425.3203 323.7305 424.6904 c323.7305 424.6904 lf1 D323.7148 426.2695 m323.6973 426.2695 l323.5039 426.6802 323.1523 426.8735 322.707 426.8735 c322.3623 426.8735 321.3789 426.7485 321.3789 424.7988 c321.3789 423.5391 321.6055 422.5483 322.7559 422.5483 c323.125 422.5483 323.5117 422.7417 323.6875 423.0767 c323.7148 423.0767 l323.7148 422.1948 l323.7148 421.7583 323.4531 421.4644 322.9746 421.4644 c322.5967 421.4644 322.3359 421.6821 322.3281 422.0776 c321.5547 422.0776 l321.4961 421.2964 322.1348 420.9438 322.8398 420.9438 c323.7715 420.9438 324.4023 421.1704 324.4023 422.1196 c324.4023 426.7905 l323.7148 426.7905 l323.7148 426.2695 l323.7148 426.2695 lf*U0 D276.2866 435.7905 m276.2866 435.2695 l276.9414 435.2695 l276.9414 431.5483 l277.6304 431.5483 l277.6304 435.2695 l278.4873 435.2695 l278.4873 435.7905 l277.6304 435.7905 l277.6304 436.5122 l277.6304 436.8569 277.7559 437.168 278.4873 437.1182 c278.4873 437.6128 l278.3862 437.6304 278.3018 437.6382 278.1587 437.6382 c277.5459 437.6382 276.9414 437.4702 276.9414 436.6128 c276.9414 435.7905 l276.2866 435.7905 l276.2866 435.7905 lf*u280.2993 437.3774 m279.5098 437.3774 l279.5098 436.5044 l280.2993 436.5044 l280.2993 437.3774 l280.2993 437.3774 lf1 D281.7783 437.3774 m280.9878 437.3774 l280.9878 436.5044 l281.7783 436.5044 l281.7783 437.3774 l281.7783 437.3774 lf281.4165 432.9756 m281.4165 432.27 280.9546 431.9937 280.5845 431.9937 c280.0981 431.9937 279.8628 432.3384 279.8628 432.8496 c279.8628 435.7905 l279.1738 435.7905 l279.1738 432.5562 l279.1738 431.8335 279.5771 431.4639 280.3164 431.4639 c280.7612 431.4639 281.1641 431.6743 281.3916 432.0601 c281.4165 432.0601 l281.4165 431.5483 l282.1475 431.5483 l282.1226 431.8423 282.106 432.1362 282.106 432.4302 c282.106 435.7905 l281.4165 435.7905 l281.4165 432.9756 l281.4165 432.9756 lf*U0 D284.0625 435.7905 m283.374 435.7905 l283.374 431.5483 l284.0625 431.5483 l284.0625 434.0508 l284.0625 434.6226 284.2559 435.2026 285.021 435.2026 c285.147 435.2026 285.2632 435.1763 285.3901 435.1597 c285.3901 435.8735 l284.7178 435.8735 284.3647 435.7993 284.0791 435.1519 c284.0625 435.1519 l284.0625 435.7905 l284.0625 435.7905 lf*u288.2573 434.3872 m289.0806 434.3872 l289.8701 434.3872 290.4658 434.2202 290.4658 433.2534 c290.4658 432.8086 290.1729 432.2197 289.3491 432.2197 c288.2573 432.2197 l288.2573 434.3872 l288.2573 434.3872 lf288.2573 436.9419 m289.3491 436.9419 l289.9961 436.9419 290.2813 436.5293 290.2813 436.0259 c290.2813 435.437 289.9878 435.0674 289.3833 435.0601 c288.2573 435.0601 l288.2573 436.9419 l288.2573 436.9419 lf1 D289.4336 431.5483 m290.1221 431.5483 291.2554 431.6987 291.2554 433.2534 c291.2554 434.0845 290.8779 434.606 290.0132 434.707 c290.0132 434.748 l290.7939 434.9243 291.0542 435.4292 291.0542 436.186 c291.0542 436.3022 291.0205 436.6636 290.8105 436.9922 c290.584 437.3276 290.2983 437.6128 289.458 437.6128 c287.4849 437.6128 l287.4849 431.5483 l289.4336 431.5483 l289.4336 431.5483 lf*U*u293.0498 435.7905 m292.3608 435.7905 l292.3608 431.5483 l293.0498 431.5483 l293.0498 435.7905 l293.0498 435.7905 lf292.3193 436.8745 m293.0923 436.8745 l293.0923 437.6128 l292.3193 437.6128 l292.3193 436.8745 l292.3193 436.8745 lf*U0 D294.9976 437.6128 m294.3091 437.6128 l294.3091 431.5483 l294.9976 431.5483 l294.9976 437.6128 l294.9976 437.6128 lf*u298.4326 433.8413 m298.4326 432.9849 298.4326 432.0264 297.6597 432.0264 c296.7939 432.0264 296.7939 432.9517 296.7939 433.5894 c296.7939 434.7231 296.8955 435.311 297.6343 435.311 c298.3984 435.311 298.4326 434.4038 298.4326 433.8413 c298.4326 433.8413 lf1 D298.4326 435.3628 m298.4063 435.3628 l298.1719 435.6973 297.8779 435.8735 297.4746 435.8735 c296.1055 435.8735 296.0718 434.6567 296.0718 433.5972 c296.0718 431.7329 296.7607 431.4639 297.4409 431.4639 c297.8867 431.4639 298.1797 431.6572 298.416 432.0527 c298.4326 432.0527 l298.4326 431.5483 l299.1211 431.5483 l299.1211 437.6128 l298.4326 437.6128 l298.4326 435.3628 l298.4326 435.3628 lf*U0 D302.6582 432.9756 m302.6582 432.27 302.1953 431.9937 301.8262 431.9937 c301.3389 431.9937 301.1045 432.3384 301.1045 432.8496 c301.1045 435.7905 l300.4141 435.7905 l300.4141 432.5562 l300.4141 431.8335 300.8174 431.4639 301.5566 431.4639 c302.002 431.4639 302.4063 431.6743 302.6328 432.0601 c302.6582 432.0601 l302.6582 431.5483 l303.3887 431.5483 l303.3633 431.8423 303.3457 432.1362 303.3457 432.4302 c303.3457 435.7905 l302.6582 435.7905 l302.6582 432.9756 l302.6582 432.9756 lf307.5801 431.5483 m307.5801 434.4878 l307.5801 435.3281 307.3535 435.8735 306.4473 435.8735 c305.9004 435.8735 305.5811 435.7231 305.3125 435.2437 c305.2773 435.2437 l305.2773 435.7905 l304.5488 435.7905 l304.5732 435.4956 304.5908 435.2026 304.5908 434.9077 c304.5908 431.5483 l305.2773 431.5483 l305.2773 434.0601 l305.2773 434.6396 305.3877 435.311 306.1436 435.311 c306.7324 435.311 306.8926 434.9414 306.8926 434.4878 c306.8926 431.5483 l307.5801 431.5483 l307.5801 431.5483 lf*u310.9834 433.6904 m310.9834 433.1016 311.0078 432.1196 310.1758 432.1196 c309.6641 432.1196 309.3535 432.438 309.3535 433.7988 c309.3535 434.3618 309.3779 435.3022 310.1602 435.3022 c311.0244 435.3022 310.9834 434.3203 310.9834 433.6904 c310.9834 433.6904 lf1 D310.9658 435.2695 m310.9492 435.2695 l310.7559 435.6802 310.4033 435.8735 309.958 435.8735 c309.6133 435.8735 308.6309 435.7485 308.6309 433.7988 c308.6309 432.5391 308.8574 431.5483 310.0078 431.5483 c310.377 431.5483 310.7637 431.7417 310.9414 432.0767 c310.9658 432.0767 l310.9658 431.1958 l310.9658 430.7583 310.7051 430.4644 310.2275 430.4644 c309.8477 430.4644 309.5879 430.6831 309.5801 431.0776 c308.8066 431.0776 l308.748 430.2974 309.3867 429.9438 310.0928 429.9438 c311.0244 429.9438 311.6543 430.1704 311.6543 431.1196 c311.6543 435.7905 l310.9658 435.7905 l310.9658 435.2695 l310.9658 435.2695 lf*U*u0 D277.3877 443.3872 m278.2109 443.3872 l279.001 443.3872 279.5967 443.2202 279.5967 442.2534 c279.5967 441.8086 279.3027 441.2197 278.4805 441.2197 c277.3877 441.2197 l277.3877 443.3872 l277.3877 443.3872 lf277.3877 445.9419 m278.4805 445.9419 l279.1265 445.9419 279.4126 445.5293 279.4126 445.0259 c279.4126 444.437 279.1182 444.0674 278.5127 444.0601 c277.3877 444.0601 l277.3877 445.9419 l277.3877 445.9419 lf1 D278.563 440.5483 m279.2529 440.5483 280.3867 440.6987 280.3867 442.2534 c280.3867 443.0845 280.0088 443.606 279.1431 443.707 c279.1431 443.748 l279.9248 443.9243 280.1855 444.4292 280.1855 445.186 c280.1855 445.3022 280.1519 445.6636 279.9414 445.9922 c279.7153 446.3276 279.4297 446.6128 278.5894 446.6128 c276.6147 446.6128 l276.6147 440.5483 l278.563 440.5483 l278.563 440.5483 lf*U0 D283.6343 441.9756 m283.6343 441.27 283.1714 440.9937 282.8018 440.9937 c282.3154 440.9937 282.0796 441.3384 282.0796 441.8496 c282.0796 444.7905 l281.3916 444.7905 l281.3916 441.5562 l281.3916 440.8335 281.7939 440.4639 282.5332 440.4639 c282.978 440.4639 283.3818 440.6743 283.6079 441.0601 c283.6343 441.0601 l283.6343 440.5483 l284.3638 440.5483 l284.3394 440.8423 284.3223 441.1362 284.3223 441.4302 c284.3223 444.7905 l283.6343 444.7905 l283.6343 441.9756 l283.6343 441.9756 lf288.5571 440.5483 m288.5571 443.4878 l288.5571 444.3281 288.3296 444.8735 287.4219 444.8735 c286.8765 444.8735 286.5571 444.7231 286.2886 444.2437 c286.2549 444.2437 l286.2549 444.7905 l285.5239 444.7905 l285.5498 444.4956 285.5664 444.2026 285.5664 443.9077 c285.5664 440.5483 l286.2549 440.5483 l286.2549 443.0601 l286.2549 443.6396 286.3638 444.311 287.1201 444.311 c287.708 444.311 287.8677 443.9414 287.8677 443.4878 c287.8677 440.5483 l288.5571 440.5483 l288.5571 440.5483 lf*u291.9414 442.8413 m291.9414 441.9849 291.9414 441.0264 291.1689 441.0264 c290.3042 441.0264 290.3042 441.9517 290.3042 442.5894 c290.3042 443.7231 290.4043 444.311 291.1445 444.311 c291.9077 444.311 291.9414 443.4038 291.9414 442.8413 c291.9414 442.8413 lf1 D291.9414 444.3628 m291.917 444.3628 l291.6821 444.6973 291.3877 444.8735 290.9844 444.8735 c289.6152 444.8735 289.5811 443.6567 289.5811 442.5972 c289.5811 440.7329 290.27 440.4639 290.9512 440.4639 c291.396 440.4639 291.6899 440.6572 291.9248 441.0527 c291.9414 441.0527 l291.9414 440.5483 l292.6309 440.5483 l292.6309 446.6128 l291.9414 446.6128 l291.9414 444.3628 l291.9414 444.3628 lf*U*u0 D294.4116 442.9673 m294.4199 444.1431 294.7813 444.353 295.2183 444.353 c295.7217 444.353 296.0669 444.2026 296.0669 442.9673 c294.4116 442.9673 l294.4116 442.9673 lf1 D296.7974 442.4468 m296.7974 442.8076 l296.7974 444.2104 296.4941 444.8735 295.2856 444.8735 c293.8154 444.8735 293.6729 443.8501 293.6729 442.606 c293.6729 440.7329 294.3862 440.4639 295.2856 440.4639 c296.1758 440.4639 296.7554 440.8921 296.7637 441.8325 c296.0078 441.8325 l295.9824 441.4058 295.7383 441.0264 295.269 441.0264 c294.731 441.0264 294.4116 441.2622 294.4116 442.4468 c296.7974 442.4468 l296.7974 442.4468 lf*U0 D300.5947 441.7583 m300.5947 443.0508 298.4785 443.0347 298.4785 443.7827 c298.4785 444.1519 298.7637 444.353 299.1328 444.353 c299.5693 444.353 299.8047 444.1177 299.7969 443.6733 c300.5605 443.6733 l300.6191 444.5127 299.9727 444.8735 299.2168 444.8735 c298.0234 444.8735 297.7549 444.1597 297.7549 443.7153 c297.7549 442.4468 299.873 442.4297 299.873 441.6738 c299.873 441.2368 299.5527 441.0264 299.1416 441.0264 c298.4443 441.0264 298.4355 441.5981 298.4355 441.8413 c297.6543 441.8413 l297.6289 440.8677 298.1992 440.4639 299.1172 440.4639 c299.9561 440.4639 300.5947 440.8257 300.5947 441.7583 c300.5947 441.7583 lf304.4395 440.5483 m304.4395 443.4038 l304.4395 443.5635 304.4727 443.9839 304.6758 444.1519 c304.8594 444.3022 304.9355 444.311 305.1953 444.311 c305.751 444.311 305.8682 443.9165 305.8682 443.4878 c305.8682 440.5483 l306.5566 440.5483 l306.5566 443.7739 l306.5566 444.7734 305.8418 444.8735 305.3984 444.8735 c305.0117 444.8735 304.625 444.7822 304.3906 444.3281 c304.2285 444.7144 303.7832 444.8735 303.3984 444.8735 c302.9033 444.8735 302.541 444.7144 302.3408 444.2607 c302.3232 444.2607 l302.3232 444.7905 l301.5918 444.7905 l301.6172 444.4956 301.6348 444.2026 301.6348 443.9077 c301.6348 440.5483 l302.3232 440.5483 l302.3232 443.4038 l302.3232 443.5635 302.3574 443.8159 302.4824 444.0264 c302.584 444.186 302.8691 444.311 303.0791 444.311 c303.6348 444.311 303.75 443.9165 303.75 443.4878 c303.75 440.5483 l304.4395 440.5483 l304.4395 440.5483 lf*u1 D308.4629 444.7905 m307.7734 444.7905 l307.7734 440.5483 l308.4629 440.5483 l308.4629 444.7905 l308.4629 444.7905 lf0 D307.7314 445.8745 m308.5049 445.8745 l308.5049 446.6128 l307.7314 446.6128 l307.7314 445.8745 l307.7314 445.8745 lf*U312.7031 440.5483 m312.7031 443.4878 l312.7031 444.3281 312.4775 444.8735 311.5693 444.8735 c311.0234 444.8735 310.7051 444.7231 310.4355 444.2437 c310.4023 444.2437 l310.4023 444.7905 l309.6709 444.7905 l309.6953 444.4956 309.7119 444.2026 309.7119 443.9077 c309.7119 440.5483 l310.4023 440.5483 l310.4023 443.0601 l310.4023 443.6396 310.5117 444.311 311.2676 444.311 c311.8555 444.311 312.0146 443.9414 312.0146 443.4878 c312.0146 440.5483 l312.7031 440.5483 l312.7031 440.5483 lf*u1 D314.6104 444.7905 m313.9219 444.7905 l313.9219 440.5483 l314.6104 440.5483 l314.6104 444.7905 l314.6104 444.7905 lf313.8789 445.8745 m314.6514 445.8745 l314.6514 446.6128 l313.8789 446.6128 l313.8789 445.8745 l313.8789 445.8745 lf*U0 D318.5244 441.7583 m318.5244 443.0508 316.4063 443.0347 316.4063 443.7827 c316.4063 444.1519 316.6914 444.353 317.0605 444.353 c317.499 444.353 317.7344 444.1177 317.7246 443.6733 c318.4902 443.6733 l318.5488 444.5127 317.9023 444.8735 317.1465 444.8735 c315.9531 444.8735 315.6836 444.1597 315.6836 443.7153 c315.6836 442.4468 317.8027 442.4297 317.8027 441.6738 c317.8027 441.2368 317.4814 441.0264 317.0713 441.0264 c316.373 441.0264 316.3652 441.5981 316.3652 441.8413 c315.583 441.8413 l315.5596 440.8677 316.1289 440.4639 317.0469 440.4639 c317.8848 440.4639 318.5244 440.8257 318.5244 441.7583 c318.5244 441.7583 lf318.9844 444.7905 m318.9844 444.2695 l319.6797 444.2695 l319.6797 441.2534 l319.6797 440.7661 319.9746 440.4976 320.6289 440.4976 c320.8564 440.4976 321.084 440.5483 321.3105 440.5659 c321.3105 441.0938 l321.1602 441.0767 321.0498 441.0601 321 441.0601 c320.3701 441.0601 320.3701 441.4058 320.3701 441.6738 c320.3701 444.2695 l321.293 444.2695 l321.293 444.7905 l320.3701 444.7905 l320.3701 445.9155 l319.6797 445.6055 l319.6797 444.7905 l318.9844 444.7905 l318.9844 444.7905 lf*u322.6094 442.9673 m322.6191 444.1431 322.9785 444.353 323.417 444.353 c323.9209 444.353 324.2656 444.2026 324.2656 442.9673 c322.6094 442.9673 l322.6094 442.9673 lf1 D324.9961 442.4468 m324.9961 442.8076 l324.9961 444.2104 324.6943 444.8735 323.4844 444.8735 c322.0137 444.8735 321.8711 443.8501 321.8711 442.606 c321.8711 440.7329 322.585 440.4639 323.4844 440.4639 c324.373 440.4639 324.9531 440.8921 324.9629 441.8325 c324.207 441.8325 l324.1797 441.4058 323.9385 441.0264 323.4688 441.0264 c322.9297 441.0264 322.6094 441.2622 322.6094 442.4468 c324.9961 442.4468 l324.9961 442.4468 lf*U0 D326.7012 444.7905 m326.0127 444.7905 l326.0127 440.5483 l326.7012 440.5483 l326.7012 443.0508 l326.7012 443.6226 326.8945 444.2026 327.6592 444.2026 c327.7852 444.2026 327.9023 444.1763 328.0283 444.1597 c328.0283 444.8735 l327.3555 444.8735 327.0039 444.7993 326.7188 444.1519 c326.7012 444.1519 l326.7012 444.7905 l326.7012 444.7905 lf*u1 D329.4521 444.7905 m328.7617 444.7905 l328.7617 440.5483 l329.4521 440.5483 l329.4521 444.7905 l329.4521 444.7905 lf328.7207 445.8745 m329.4941 445.8745 l329.4941 446.6128 l328.7207 446.6128 l328.7207 445.8745 l328.7207 445.8745 lf*U0 D332.9102 441.9756 m332.9102 441.27 332.4512 440.9937 332.0801 440.9937 c331.5918 440.9937 331.3574 441.3384 331.3574 441.8496 c331.3574 444.7905 l330.6699 444.7905 l330.6699 441.5562 l330.6699 440.8335 331.0723 440.4639 331.8125 440.4639 c332.2578 440.4639 332.6602 440.6743 332.8867 441.0601 c332.9102 441.0601 l332.9102 440.5483 l333.6426 440.5483 l333.6172 440.8423 333.6006 441.1362 333.6006 441.4302 c333.6006 444.7905 l332.9102 444.7905 l332.9102 441.9756 l332.9102 441.9756 lf337.6406 440.5483 m337.6406 443.4038 l337.6406 443.5635 337.6738 443.9839 337.877 444.1519 c338.0605 444.3022 338.1357 444.311 338.3965 444.311 c338.9512 444.311 339.0684 443.9165 339.0684 443.4878 c339.0684 440.5483 l339.7588 440.5483 l339.7588 443.7739 l339.7588 444.7734 339.0439 444.8735 338.5986 444.8735 c338.2119 444.8735 337.8262 444.7822 337.5908 444.3281 c337.4316 444.7144 336.9863 444.8735 336.5996 444.8735 c336.1035 444.8735 335.7422 444.7144 335.541 444.2607 c335.5234 444.2607 l335.5234 444.7905 l334.793 444.7905 l334.8193 444.4956 334.8359 444.2026 334.8359 443.9077 c334.8359 440.5483 l335.5234 440.5483 l335.5234 443.4038 l335.5234 443.5635 335.5576 443.8159 335.6836 444.0264 c335.7852 444.186 336.0703 444.311 336.2813 444.311 c336.834 444.311 336.9521 443.9165 336.9521 443.4878 c336.9521 440.5483 l337.6406 440.5483 l337.6406 440.5483 lf0 O0 0.12 1 0.05 k268.6426 416.5469 m271.2998 416.5469 l271.2998 401.5469 l268.6426 401.5469 l268.6426 416.5469 l268.6426 416.5469 lf0 1 1 0 k268.6426 431.6001 m271.2998 431.6001 l271.2998 416.5469 l268.6426 416.5469 l268.6426 431.6001 l268.6426 431.6001 lf1 O0 0 0 1 k268.6426 446.5474 m271.2998 446.5474 l271.2998 431.5483 l268.6426 431.5483 l268.6426 446.5474 l268.6426 446.5474 lf*u1 D253.4688 431.5454 m253.4688 431.5454 l253.4688 431.5454 lf253.4697 431.5386 m253.4697 431.5386 l253.4697 431.5386 lf253.4683 431.5371 m253.4683 431.5371 l253.4683 431.5371 lf253.4683 431.5483 m253.4683 431.5483 l253.4683 431.5483 lf260.3535 444.0112 m260.3535 444.8657 259.7324 445.5415 259.5137 445.7329 c259.356 445.6968 l259.5889 445.4126 259.999 444.9375 259.999 444.3076 c259.999 443.0684 258.689 441.9907 257.1938 441.9712 c257.2051 441.8438 257.2046 441.731 257.2046 441.6353 c257.2046 441.4575 257.1934 441.2842 257.1719 441.1157 c258.8687 441.1465 260.3535 442.5259 260.3535 444.0112 c260.3535 444.0112 lf250.7124 444.3076 m250.7124 444.9375 251.1226 445.4126 251.3545 445.6968 c251.1982 445.7329 l250.9785 445.5415 250.3574 444.8657 250.3574 444.0112 c250.3574 442.5151 251.8633 441.1265 253.5757 441.1147 c253.5576 441.2778 253.5469 441.4497 253.5469 441.6353 c253.5469 441.75 253.5518 441.8638 253.5615 441.9697 c252.0483 441.9697 250.7124 443.0566 250.7124 444.3076 c250.7124 444.3076 lf255.313 445.4595 m255.3911 445.6392 255.4961 445.8521 255.4961 446.0864 c255.4961 446.7358 254.958 447.0444 254.2378 447.0444 c253.8682 447.0444 253.6812 446.9253 253.6812 446.8052 c253.6812 446.6851 253.8037 446.4214 253.8506 446.3403 c253.9834 446.3994 254.2241 446.4697 254.3633 446.4697 c254.8574 446.4697 255.2266 445.9155 255.313 445.4595 c255.313 445.4595 lf0 D255.667 446.2896 m256.0879 446.2075 256.375 446.7451 255.9746 446.8413 c256.0303 446.6636 255.7607 446.5386 y255.6582 446.7759 255.7915 446.9116 v255.5464 447.0317 255.4844 446.8857 255.4795 446.7349 c255.5762 446.606 255.6387 446.4556 255.667 446.2896 c255.667 446.2896 lf257.0293 442.605 m257.0967 442.6001 257.1611 442.5967 257.2285 442.5967 c258.4131 442.5967 259.5889 443.3628 259.5889 444.3452 c259.5889 444.8687 259.353 445.2349 259.062 445.6406 c258.8916 445.6118 258.7358 445.5962 258.6133 445.5962 c258.0767 445.5962 257.7852 445.8838 257.7642 446.1665 c257.7642 446.4204 257.9712 446.6133 258.292 446.6133 c258.7905 446.6133 259.6992 446.147 260.6147 446.147 c260.5244 446.0786 260.375 446.0068 260.1943 445.9395 c260.731 445.4561 261.0894 444.8086 261.2266 444.1167 c262.6294 441.8706 l262.8647 441.4956 263.3633 440.7593 264.1133 440.1831 c263.2065 440.1831 262.6035 440.1621 261.8369 441.3755 c261.1182 442.5264 l261.0649 442.3774 260.9985 442.2329 260.9219 442.0903 c262.3521 439.8013 l262.5903 439.4224 263.0825 438.6909 263.8369 438.1128 c262.9292 438.1128 262.3281 438.0908 261.5605 439.3052 c260.3291 441.2759 l260.2373 441.1787 260.1401 441.0825 260.0371 440.9907 c261.7749 438.2104 l262.0142 437.8296 262.5049 437.1021 263.2598 436.5229 c262.3521 436.5229 261.7505 436.5015 260.9824 437.7158 c259.2896 440.4258 l259.1772 440.355 259.0635 440.2876 258.9463 440.2222 c261.0127 436.9146 l261.251 436.5352 261.7412 435.8062 262.4971 435.2271 c261.5898 435.2271 260.9873 435.2056 260.2212 436.4204 c258.0928 439.8267 l257.9668 439.7778 257.8379 439.7319 257.7085 439.6904 c260.1143 435.8403 l260.3481 435.4673 260.8511 434.7275 261.5977 434.1533 c260.6904 434.1533 260.0879 434.1323 259.3218 435.3462 c256.7583 439.4497 l256.6797 439.4355 l256.6104 439.2134 256.562 439.0063 256.562 438.7998 c256.562 437.5107 257.4077 436.3726 258.4238 435.4937 c258.3584 435.4658 258.2451 435.4546 258.1401 435.4546 c257.9316 435.4546 257.7959 435.4673 257.7002 435.4834 c257.9365 434.9478 258.4414 434.2583 258.6963 433.9009 c259.0293 433.96 259.5127 434.0073 259.8291 434.0073 c260.1602 434.0073 260.1968 433.8135 260.1968 433.6401 c260.1968 433.3394 260.0562 433.0981 259.8936 432.9644 c259.832 433.1196 259.7085 433.3247 259.0962 433.3247 c259.0342 433.3228 l259.2139 433.1226 259.7734 432.6704 259.7734 432.3047 c259.7734 432.064 259.5088 431.7017 259.1592 431.7017 c259.1812 431.7798 259.1772 431.8511 259.1772 431.9048 c259.1772 432.1997 258.916 432.5454 258.6953 432.7866 c258.7007 432.7148 258.6982 432.7231 258.6982 432.6387 c258.6982 431.9409 258.6353 431.6196 258.1914 431.6196 c257.9746 431.6196 257.8237 431.7393 257.7725 431.7744 c258.0601 432.0405 258.0757 432.249 258.0757 432.6401 c258.0728 432.979 l258.0723 433.0688 258.0737 433.1865 258.0874 433.2729 c257.9287 433.2949 257.8657 433.2944 257.7432 433.2944 c257.1123 433.3442 256.9609 433.0166 v256.7905 433.1724 256.543 433.394 256.543 433.6401 c256.543 433.8013 256.6187 433.9834 256.9424 433.9834 c257.0654 433.9834 257.4521 433.9072 257.7754 433.9072 c257.689 434.1006 257.3018 434.666 256.9678 435.0776 c256.9165 434.9185 256.8369 434.7451 256.6611 434.605 c256.6367 434.8696 256.4824 435.7031 256.0698 436.1899 c256.0215 435.8613 255.9565 435.5229 255.9565 434.8101 c255.9565 433.0752 256.374 431.7935 257.2598 431.5483 c257.145 431.3467 256.9014 431.1665 256.6484 431.1665 c256.3242 431.1665 256.1475 431.5337 255.9678 431.8799 c255.874 431.6235 255.6157 430.9995 255.3555 430.9995 c255.0957 430.9995 254.8369 431.6235 254.7437 431.8799 c254.5635 431.5337 254.3867 431.1665 254.062 431.1665 c253.8096 431.1665 253.5659 431.3467 253.4512 431.5483 c254.3364 431.7935 254.7544 433.0752 254.7544 434.8101 c254.7544 435.5229 254.6895 435.8613 254.6406 436.1899 c254.2285 435.7031 254.0732 434.8696 254.0498 434.605 c253.874 434.7451 253.7944 434.9185 253.7437 435.0776 c253.4092 434.666 253.0225 434.1006 252.9351 433.9072 c253.2593 433.9072 253.6455 433.9834 253.7686 433.9834 c254.0928 433.9834 254.1689 433.8013 254.1689 433.6401 c254.1689 433.394 253.9199 433.1724 253.75 433.0166 c253.5981 433.3442 252.9683 433.2944 y252.8457 433.2944 252.7827 433.2949 252.6235 433.2729 c252.6367 433.1865 252.6396 433.0688 252.6377 432.979 c252.6357 432.6401 l252.6357 432.249 252.6504 432.0405 252.9385 431.7744 c252.8872 431.7393 252.7368 431.6196 252.5195 431.6196 c252.0757 431.6196 252.0127 431.9409 252.0127 432.6387 c252.0127 432.7231 252.0098 432.7148 252.0161 432.7866 c251.7944 432.5454 251.5337 432.1997 251.5337 431.9048 c251.5337 431.8511 251.5303 431.7798 251.5513 431.7017 c251.2026 431.7017 250.9375 432.064 250.9375 432.3047 c250.9375 432.6704 251.498 433.1226 251.6768 433.3228 c251.6147 433.3247 l251.0029 433.3247 250.8784 433.1196 250.8179 432.9644 c250.6543 433.0981 250.5137 433.3394 250.5137 433.6401 c250.5137 433.8135 250.5508 434.0073 250.8818 434.0073 c251.1992 434.0073 251.6821 433.96 252.0146 433.9009 c252.269 434.2583 252.7744 434.9478 253.0103 435.4834 c252.9155 435.4673 252.7803 435.4546 252.5708 435.4546 c252.4663 435.4546 252.3525 435.4658 252.2881 435.4937 c253.3027 436.3726 254.1484 437.5107 254.1484 438.7998 c254.1484 439.0063 254.1011 439.2134 254.0308 439.4355 c253.9531 439.4497 l251.3896 435.3462 l250.6226 434.1323 250.0205 434.1533 249.1133 434.1533 c249.8604 434.7275 250.3623 435.4673 250.5967 435.8403 c253.0029 439.6904 l252.8726 439.7319 252.7451 439.7778 252.6187 439.8267 c250.4902 436.4204 l249.7231 435.2056 249.1206 435.2271 248.2144 435.2271 c248.9697 435.8062 249.4595 436.5352 249.6982 436.9146 c251.7651 440.2222 l251.647 440.2876 251.5332 440.355 251.4214 440.4258 c249.728 437.7158 l248.9604 436.5015 248.3594 436.5229 247.4512 436.5229 c248.2065 437.1021 248.6973 437.8296 248.936 438.2104 c250.6733 440.9907 l250.5713 441.0825 250.4736 441.1787 250.3818 441.2759 c249.1509 439.3052 l248.3828 438.0908 247.7813 438.1128 246.874 438.1128 c247.6279 438.6909 248.1206 439.4224 248.3594 439.8013 c249.7886 442.0903 l249.7129 442.2329 249.6465 442.3774 249.5933 442.5264 c248.874 441.3755 l248.1069 440.1621 247.5049 440.1831 246.5981 440.1831 c247.3486 440.7593 247.8462 441.4956 248.082 441.8706 c249.4849 444.1167 l249.6216 444.8086 249.98 445.4561 250.5166 445.9395 c250.3369 446.0068 250.1865 446.0786 250.0962 446.147 c251.0117 446.147 251.9199 446.6128 252.418 446.6128 c252.7402 446.6128 252.9463 446.4204 252.9463 446.1665 c252.9263 445.8838 252.6343 445.5962 252.0972 445.5962 c251.9756 445.5962 251.8198 445.6118 251.6484 445.6406 c251.3579 445.2349 251.1226 444.8687 251.1226 444.3452 c251.1226 443.3628 252.2974 442.5967 253.4834 442.5967 c253.5503 442.5967 253.6143 442.6001 253.6812 442.605 c253.916 443.3999 254.416 443.9224 254.8154 444.4331 c254.3364 444.6069 253.8027 445.062 253.8027 445.2681 c253.8633 445.3032 254.7808 445.0142 254.876 444.9888 c254.8955 444.9839 254.915 444.9819 254.937 444.9888 c255.0488 445.0225 255.1421 445.186 255.1421 445.2026 c255.0439 445.2188 254.4688 445.2935 254.0752 445.436 c253.7764 445.5454 253.625 445.7437 253.625 445.8193 c253.7207 445.8345 254.085 445.6436 254.6191 445.6436 c254.8164 445.6436 254.8555 445.6519 255.0518 445.6758 c254.9136 446.0039 254.6543 446.2817 254.3633 446.2817 c254.2456 446.2817 253.9893 446.2085 253.7744 446.1011 c253.6255 446.3325 253.4941 446.6382 253.4941 446.8052 c253.4941 447.0015 253.689 447.2319 254.2378 447.2319 c254.3916 447.2319 254.5347 447.2192 254.668 447.1938 c254.7754 447.1743 254.8652 447.1499 254.9624 447.1118 c254.9546 447.1255 254.9502 447.1548 254.9502 447.1816 c254.9502 447.2578 255.019 447.3374 255.2773 447.3374 c255.7285 447.3374 256.1919 447.1899 256.7598 447.1899 c256.9072 447.1899 257.0068 447.1938 257.0923 447.23 c257.0557 447.1172 256.896 446.9502 256.7495 446.8154 c256.8394 446.6919 257.0747 446.394 257.0747 445.9131 c257.0747 445.1401 256.5654 444.5034 256.5654 443.7217 c256.5654 443.2573 256.9229 442.8486 257.0293 442.605 c257.0293 442.605 lf*Uu*u0 O800 Ar278.4233 464.3247 m278.4233 464.771 278.2397 465.0122 277.751 465.0122 c277.5991 465.0122 277.0532 464.9858 277.0532 464.1934 c277.0532 462.9121 L277.0532 462.0825 277.2944 461.873 277.751 461.873 c278.0981 461.873 278.3286 461.9673 278.4287 462.041 c278.4287 463.1748 L277.7305 463.1748 L277.7305 463.5947 L278.9116 463.5947 L278.9116 461.752 L278.6021 461.584 278.2397 461.4688 277.751 461.4688 c276.9482 461.4688 276.5596 461.8833 276.5596 462.9336 c276.5596 464.1772 L276.5596 464.9336 276.9482 465.4165 277.751 465.4165 c278.5703 465.4165 278.959 465.1172 278.9277 464.3247 C278.4233 464.3247 lf*U*u279.8145 461.5474 m279.8145 465.3379 L281.7676 465.3379 L281.7676 464.918 L280.2974 464.918 L280.2974 463.6997 L281.6626 463.6997 L281.6626 463.2798 L280.2974 463.2798 L280.2974 461.9673 L281.7988 461.9673 L281.7988 461.5474 L279.8145 461.5474 lf*U*u282.4028 461.5474 m282.4028 465.3379 L284.2822 465.3379 L284.2822 464.918 L282.8857 464.918 L282.8857 463.6997 L284.209 463.6997 L284.209 463.2798 L282.8857 463.2798 L282.8857 461.5474 L282.4028 461.5474 lf*U*u284.7549 462.9336 m284.7549 464.1772 L284.7549 464.9336 285.1431 465.4165 285.9468 465.4165 c286.75 465.4165 287.1382 464.9336 287.1382 464.1772 c287.1382 462.9336 L287.1382 461.8833 286.75 461.4688 285.9468 461.4688 c285.1431 461.4688 284.7549 461.8833 284.7549 462.9336 cf285.7363 465.7842 m285.2432 465.7842 L285.2432 466.3301 L285.7363 466.3301 L285.7363 465.7842 lf1 D286.6445 462.9121 m286.6445 464.1934 L286.6445 464.9858 286.0986 465.0122 285.9468 465.0122 c285.7944 465.0122 285.248 464.9858 285.248 464.1934 c285.248 462.9121 L285.248 462.0825 285.4897 461.873 285.9468 461.873 c286.4033 461.873 286.6445 462.0825 286.6445 462.9121 cf286.6602 465.7842 m286.167 465.7842 L286.167 466.3301 L286.6602 466.3301 L286.6602 465.7842 lf*U*u0 D288.4507 463.2905 m288.4507 461.5474 L287.9678 461.5474 L287.9678 465.3379 L289.2754 465.3379 L289.9473 465.3379 290.1836 464.8652 290.1836 464.3931 c290.1836 463.9468 289.9365 463.6055 289.4902 463.5269 c289.4902 463.5161 L289.9258 463.4478 290.0835 463.3008 290.1099 462.5396 c290.1147 462.377 290.1675 461.7837 290.2407 461.5474 c289.7368 461.5474 L289.6006 461.8101 289.6318 462.3032 289.5898 462.8076 c289.5532 463.269 289.1802 463.2905 289.0176 463.2905 C288.4507 463.2905 lf1 D288.4507 463.7104 m289.1753 463.7104 L289.5215 463.7104 289.6895 464.0098 289.6895 464.3403 c289.6895 464.6133 289.5532 464.918 289.1802 464.918 c288.4507 464.918 L288.4507 463.7104 lf*U*u0 D290.9077 465.3379 m292.0732 465.3379 L292.5566 465.3379 292.9028 465.1646 293.0918 464.7603 c293.2441 464.4399 293.2598 463.6841 293.2598 463.5635 c293.2598 462.7549 293.1865 462.2876 293.0288 462.0356 c292.8242 461.71 292.4404 461.5474 291.7793 461.5474 c290.9077 461.5474 L290.9077 465.3379 lf1 D291.3906 461.9673 m291.8477 461.9673 L292.5195 461.9673 292.7661 462.2192 292.7661 463.1011 c292.7661 463.8677 L292.7661 464.6343 292.5303 464.918 292.0264 464.918 c291.3906 464.918 L291.3906 461.9673 lf*U*u0 D294.105 461.5474 m294.105 465.3379 L296.0581 465.3379 L296.0581 464.918 L294.5879 464.918 L294.5879 463.6997 L295.9531 463.6997 L295.9531 463.2798 L294.5879 463.2798 L294.5879 461.9673 L296.0898 461.9673 L296.0898 461.5474 L294.105 461.5474 lf*U*u297.2026 463.2905 m297.2026 461.5474 L296.7197 461.5474 L296.7197 465.3379 L298.0273 465.3379 L298.6982 465.3379 298.9355 464.8652 298.9355 464.3931 c298.9355 463.9468 298.6885 463.6055 298.2422 463.5269 c298.2422 463.5161 L298.6777 463.4478 298.8359 463.3008 298.8613 462.5396 c298.8672 462.377 298.9189 461.7837 298.9932 461.5474 c298.4893 461.5474 L298.3516 461.8101 298.3838 462.3032 298.3418 462.8076 c298.3047 463.269 297.9316 463.2905 297.7695 463.2905 C297.2026 463.2905 lf1 D297.2026 463.7104 m297.9268 463.7104 L298.2734 463.7104 298.4414 464.0098 298.4414 464.3403 c298.4414 464.6133 298.3047 464.918 297.9316 464.918 c297.2026 464.918 L297.2026 463.7104 lf*U*u0 D301.7754 465.3379 m301.7754 464.918 L300.7773 464.918 L300.7773 461.5474 L300.2949 461.5474 L300.2949 464.918 L299.2969 464.918 L299.2969 465.3379 L301.7754 465.3379 lf*U*u304.7568 461.5474 m304.1797 461.5474 L303.083 465.3379 L303.6074 465.3379 L304.4736 462.0039 L304.4844 462.0039 L305.3711 465.3379 L305.8643 465.3379 L304.7568 461.5474 lf*U*u306.3428 462.9336 m306.3428 464.1772 L306.3428 464.9336 306.7305 465.4165 307.5342 465.4165 c308.3379 465.4165 308.7266 464.9336 308.7266 464.1772 c308.7266 462.9336 L308.7266 461.8833 308.3379 461.4688 307.5342 461.4688 c306.7305 461.4688 306.3428 461.8833 306.3428 462.9336 cf1 D308.2324 462.9121 m308.2324 464.1934 L308.2324 464.9858 307.6865 465.0122 307.5342 465.0122 c307.3818 465.0122 306.8359 464.9858 306.8359 464.1934 c306.8359 462.9121 L306.8359 462.0825 307.0771 461.873 307.5342 461.873 c307.9902 461.873 308.2324 462.0825 308.2324 462.9121 cf*U*u0 D310.0234 461.5474 m309.5713 461.5474 L309.5713 465.3379 L310.3535 465.3379 L311.3086 462.1563 L311.3193 462.1563 L312.2852 465.3379 L313.083 465.3379 L313.083 461.5474 L312.6006 461.5474 L312.6006 464.918 L312.5898 464.918 L311.5293 461.5474 L311.0723 461.5474 L310.0332 464.918 L310.0234 464.918 L310.0234 461.5474 lf*UUUU0 A-7894 461.5625 m8489 461.5625 L(N) *-7894 476.5625 m8489 476.5625 L(N) *255.3438 8612 m255.3438 -7771 L(N) *234.0781 8612 m234.0781 -7771 L(N) *-7894 386.5625 m8489 386.5625 L(N) *361.0156 8612 m361.0156 -7771 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF